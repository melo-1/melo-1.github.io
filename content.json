[{"title":"python实战爬虫有道翻译与解决有道翻译反爬虫问题","date":"2020-03-22T12:21:12.000Z","path":"2020/03/22/python学习/","text":"前言：&nbsp; &nbsp; 不需要打开有道翻译网页就能在本地使用，还是很方便的。所以学习爬虫确实还是一个比较有意思且实用的过程，另一方面，现在的网站或多或少都有反爬机制，这样斗智斗勇的感觉也挺有趣的。&nbsp; &nbsp; 当然反爬机制也让我更明白了Python爬虫还需要再多多学习，毕竟有道的反爬机制对于我这个初学者来说都不太简单那其他更加复杂的网站的反爬机制将会更有挑战性~ 爬有道翻译：&nbsp; &nbsp; 首先我们需要实地考察有道翻译,并点击红框中内容~ &nbsp; &nbsp; 可以看到右边出现的为Request Method：POST，且在Data栏中可以看到i:后接的是待翻译内容，再看看Preview中就有翻译过来的内容，可知我们需要找的POST内容就是这个了。接下来就是可以准备写代码了，具体的内容介绍在代码注释中可见: 1234567891011121314151617181920212223242526272829303132333435363738394041import urllib.requestimport urllib.parseimport json#引入需要的模块url&#x3D; &#39;http:&#x2F;&#x2F;fanyi.youdao.com&#x2F;translate_o?smartresult&#x3D;dict&amp;smartresult&#x3D;rule&#39;#需要打开网页的链接，这个在Request URL栏while True: content &#x3D; input(&quot;请输入你想要翻译的内容~\\n&quot;) head &#x3D; &#123;&#125; head[&#39;User-Agent&#39;] &#x3D; &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;80.0.3987.122 Safari&#x2F;537.36&#39; #模拟浏览器访问，简单的防止反爬机制。这个在Request Headers中的User-Agent栏。 data &#x3D; &#123;&#125; data[&#39;i&#39;] &#x3D; content data[&#39;from&#39;] &#x3D; &#39;AUTO&#39; data[&#39;to&#39;] &#x3D; &#39;AUTO&#39; data[&#39;smartresult&#39;] &#x3D; &#39;dict&#39; data[&#39;client&#39;] &#x3D; &#39;fanyideskweb&#39; data[&#39;salt&#39;] &#x3D; &#39;15847864360501&#39; data[&#39;sign&#39;] &#x3D; &#39;f762faa6901c6cf473fce719f8238ca8&#39; data[&#39;ts&#39;] &#x3D; &#39;1584786436050&#39; data[&#39;bv&#39;] &#x3D; &#39;0ed2e07b89acaa1301d499442c9fdf79&#39; data[&#39;doctype&#39;] &#x3D; &#39;json&#39; data[&#39;version&#39;] &#x3D; &#39;2.1&#39; data[&#39;keyfrom&#39;] &#x3D; &#39;fanyi.web&#39; data[&#39;action&#39;] &#x3D; &#39;FY_BY_REALTlME&#39; #将Form Data数据存入data字典中。 data &#x3D; urllib.parse.urlencode(data).encode(&#39;utf-8&#39;) #将data以utf-8的形式编码 req &#x3D; urllib.request.Request(url,data,head) #以代码中的data与head形式访问代码中的url链接 response &#x3D; urllib.request.urlopen(req) #打开url网页并传送data与head html &#x3D; response.read().decode(&#39;utf-8&#39;) #读取打开的网页并进行utf-8解码 target &#x3D; json.loads(html) #识别json print(html) #print(&quot;翻译的结果是:%s&quot;%(target[&#39;translateResult&#39;][0][0][&#39;tgt&#39;])) print(&quot;********************************************************&quot;) #输出结果 &nbsp; &nbsp; 大家执行完代码后会发现报错：{“errorCode”:50}，其实代码是没有问题的，只是有道加入了反爬机制。所以接下来需要做的是如何反反爬机制。 ##解决有道翻译的反爬机制&nbsp; &nbsp; 解决方案一：可以在上述的代码中将url= http://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule 中的_o去除，即解除网页反爬虫机制。（其实是解除了salt、sign参数的作用） &nbsp; &nbsp; 解决方案二：依旧需要实地考察有道网站，我们多次尝试翻译。可以发现在Data数据中变化的是salt、sign和ts。可以猜测实现反爬机制的关键就在这三个加密的参数~接下来先介绍这三个参数的作用：1、salt:加密信息，根据数据的特点可以猜测与时间戳有关2、sign:签名字符串3、ts:毫秒时间戳 &nbsp; &nbsp; 再稍微介绍一下其他数据的功能：1、i:待翻译内容2、from:源语言的语种（这里是AUTO，即可以进行多语言互译不局限于英汉互译）3、to:翻译后的语种（AUTO同上）4、smartresult: 固定值5、client:客户端6、bv:md5值7、doctype:文档类型8、version:版本9、keyfrom：键来源10、action:操作动作11、typoResult:打印错误 &nbsp; &nbsp; 开始分析sign、salt和ts具体获取方式。先去网页的源代码中查看，并没有此参数，于是考虑是否在js文件中生成这三个参数。最后在fanyi.min.js文件中找了这三个结果。当然js文件的内容格式比较可怕，建议将其格式化后再用sublimetext进行查找salt参数。接下来可见代码片段： 1234567891011121314151617181920212223242526272829303132333435var r &#x3D; function(e) &#123; var t &#x3D; n.md5(navigator.appVersion), r &#x3D; &quot;&quot; + (new Date).getTime(), i &#x3D; r + parseInt(10 * Math.random(), 10); return &#123; ts: r, bv: t, salt: i, sign: n.md5(&quot;fanyideskweb&quot; + e + i + &quot;Nw(nmmbP%A-r6U3EUn]Aj&quot;) &#125;&#125;;t.recordUpdate &#x3D; function(e) &#123; var t &#x3D; e.i, i &#x3D; r(t); n.ajax(&#123; type: &quot;POST&quot;, contentType: &quot;application&#x2F;x-www-form-urlencoded; charset&#x3D;UTF-8&quot;, url: &quot;&#x2F;bettertranslation&quot;, data: &#123; i: e.i, client: &quot;fanyideskweb&quot;, salt: i.salt, sign: i.sign, ts: i.ts, bv: i.bv, tgt: e.tgt, modifiedTgt: e.modifiedTgt, from: e.from, to: e.to &#125;, success: function(e) &#123;&#125;, error: function(e) &#123;&#125; &#125;)&#125; &nbsp; &nbsp; 从上述js代码中可见salt的获取方式，可知确实为时间戳：&nbsp; &nbsp; i = r + parseInt(10 * Math.random(), 10)&nbsp; &nbsp; 其中r为ts获取方式：&nbsp; &nbsp; r = “” + (new Date).getTime()&nbsp; &nbsp; sign的获取方式为：&nbsp; &nbsp; sign = n.md5(“fanyideskweb” + e + i + “Nw(nmmbP%A-r6U3EUn]Aj”)&nbsp; &nbsp; 其中前后两个为固定值，只有e与i在改变。e为待翻译内容，i为salt。 &nbsp; &nbsp; 弄明白了以上三个参数的来源，接下来可以开始动手写代码。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import randomimport timeimport requestsimport hashlibimport json def generateSaltSign(e): navigator_appVersion &#x3D; &quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;74.0.3729.169 Safari&#x2F;537.36&quot; t &#x3D; hashlib.md5(navigator_appVersion.encode(&quot;utf-8&quot;)).hexdigest() r &#x3D; str(int(time.time()*1000)) i &#x3D; r + str(random.randint(1,10)) return &#123; &quot;ts&quot;: r, &quot;bv&quot;: t, &quot;salt&quot;: i, &quot;sign&quot;: hashlib.md5(str(&quot;fanyideskweb&quot; + e + i + &quot;97_3(jkMYg@T[KZQmqjTK&quot;).encode(&quot;utf-8&quot;)).hexdigest() &#125; def spider(i): url &#x3D; &#39;http:&#x2F;&#x2F;fanyi.youdao.com&#x2F;translate_o?smartresult&#x3D;dict&amp;smartresult&#x3D;rule&#39; r &#x3D; generateSaltSign(i) data &#x3D; &#123; &quot;i&quot;: i, &quot;from&quot;: &quot;AUTO&quot;, &quot;to&quot;: &quot;AUTO&quot;, &quot;smartresult&quot;: &quot;dict&quot;, &quot;client&quot;: &quot;fanyideskweb&quot;, &quot;salt&quot;: r[&quot;salt&quot;], &quot;sign&quot;: r[&quot;sign&quot;], &quot;ts&quot;: r[&quot;ts&quot;], &quot;bv&quot;: r[&quot;bv&quot;], &quot;doctype&quot;: &quot;json&quot;, &quot;version&quot;: &quot;2.1&quot;, &quot;keyfrom&quot;: &quot;fanyi.web&quot;, &quot;action&quot;: &quot;FY_BY_REALTlME&quot;, &#125; #data &#x3D; parse.urlencode(data).encode(&#39;utf-8&#39;) headers &#x3D; &#123; &quot;Cookie&quot;: &quot;OUTFOX_SEARCH_USER_ID&#x3D;-286220249@10.108.160.17;&quot;, &quot;Referer&quot;: &quot;http:&#x2F;&#x2F;fanyi.youdao.com&#x2F;&quot;, &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;74.0.3729.169 Safari&#x2F;537.36&quot;, &#125; response &#x3D; requests.post(url&#x3D;url, data&#x3D;data, headers&#x3D;headers) html &#x3D; response.text target &#x3D; json.loads(html) print(&quot;翻译的结果是:%s&quot;%(target[&#39;translateResult&#39;][0][0][&#39;tgt&#39;])) print(&quot;********************************************************&quot;) #print(html) if __name__ &#x3D;&#x3D; &#39;__main__&#39;: while True: i &#x3D; input(&quot;请输入你想要翻译的内容~\\n&quot;) spider(i) 代码解读&nbsp; &nbsp; 1、第一个函数根据js文件模仿网页生成salt、sign和ts参数。&nbsp; &nbsp; 2、第二个函数是开始准备爬虫的请求函数，这里有两个关键的内容。data与headers。一个是需要发送给网站信息，一个是请求头文件。模拟浏览器正常访问。&nbsp; &nbsp; 最后展示一个成功运行结果图。 总结&nbsp; &nbsp; 最近在开始学习Python，所以这一周没有打理博客了。现在慢慢准备上手一些爬虫的实例。如果好玩的话会继续分享，也算是见证自己的成长~&nbsp; &nbsp; 谢谢大家观看，因为是Python初学者所以或多或少会有错误，如果博客中有表达问题还请在评论中指正！","tags":[{"name":"随笔","slug":"随笔","permalink":"https://melo-1.github.io/tags/%E9%9A%8F%E7%AC%94/"},{"name":"Python学习","slug":"Python学习","permalink":"https://melo-1.github.io/tags/Python%E5%AD%A6%E4%B9%A0/"}]},{"title":"如何加快家里WIFI速度的方法","date":"2020-03-13T14:10:12.000Z","path":"2020/03/13/加快WIFI速度/","text":"前言：是否在家中悠然刷着抖音却忽然半天刷不出新视频？是否每次追剧的时候进度条总跟不上浏览速度？？ 是否科学上网的时候总是进网页缓慢？？？ 那就赶紧试试下面这些方法吧！ BGM依旧来自彩虹岛，希望大家也能够喜欢这些纯音乐 解决问题的基础背景：我们将在现有的路由器基础上进行WIFI的提速，也就是说本文不涉及路由器的购买~ 需要大家进入路由器后端192.168.1.1（有的是192.168.0.1） 我们家的路由器为：TP-LINK的TL-WR886N（频段带宽为20MHZ） 接下来将会展现给大家九个Tips：1、更改DHCP，更改DNS解析域名2、更改信道3、更改无线模式4、更改频段带宽5、更改信号强度6、更改MTU7、路由器重启8、路由器摆放位置9、路由器的四个天线摆放位置 进入正题：逐个介绍Tips第一个：更改路由器后端的DHCP&nbsp; 首先你必须已经进入路由器的后端，一般没有设置路由器登录密码的话初始密码为：admin。OK，此时你已经顺利进入路由器网页，如下图所示；点击红框框住的路由设置，找到左侧栏中的DHCP服务器。 &nbsp; 再根据下图所示，更改DNS的设置。第一个DNS是114.114.114.114属于国内三大运营商的DNS，属于进国内网站很友好的。第二个DNS是8.8.8.8属于谷歌的DNS，这个对于科学上网是加速明显的。在这里稍微解释一下为何设置了DNS就能“加快”WIFI速度呢？其实好的且稳定的DNS最直接的作用是能够加快域名的解析速度，从而提升网页打开速度即提升上网的体验~ （这个确实是挺有用的，举例：没改之前看TikTok还是有很明显的卡顿，更改后体验效果好多了基本上无卡顿感~）&nbsp; 更改了路由器的DHCP后，所有连接此WIFI的手机，只要上网设置是DHCP而不是静态的就都会按照路由器中所设置的DNS进行域名解析。所以，如果家里的路由器密码忘记了不能进入后端更改，也可以直接在自己的手机上在WIFI设置中取消DHCP自动设置，选择静态设置，只更改静态设置中的DNS即可，一样的效果。 第二、三、四：更改路由器中的信道、无线模式和频段带宽&nbsp; 信道也称为通道或者频段，是无线信号传送通道。根据频带划分总共具有13个信道。而一般路由器出厂设置为默认的1或者6。这样导致在路由器集中的地方，相同信道相互干扰，影响传输速度。所以这里建议使用自动选择，根据当前环境自动寻找最佳工作信道，避免同频干扰与竞争。（PS：这里我直接手动选择11信道，原因是与1、6不重叠）&nbsp; 无线模式这里建议选择11bgn mixed。表示网速以11b,g,n的混合网络模式运行，满足家中不同设备的上网需求。需要具体了解专有名词内涵的可直接百度，这里就着重于设置路由器~&nbsp; 频段带宽指的是路由器的发射频率宽度。20MHZ对应的是65M带宽，穿透性好传输距离远。40MHZ对应的是150M带宽，穿透性与传输距离肯定就不如20MHZ了。所以追求稳定的话就选择20MHZ，近距离传输的话选择40MHZ或者更高。 第五：更改信号强度&nbsp; 咱们追求的是WIFI速度，所以这里直接选择最高档——增强。 第六：更改MTU&nbsp; MTU为最大传输单元。即MTU指定了网络中可传输数据包的最大尺寸，举个简单的例子：当一辆车能够运输的货物增多了，那么原来需要走两趟的活一趟就能够搞定。所以我们寻找路由器最大可以设置的MTU的目的就是在此。如何寻找最大MTU，则需要进入电脑的终端，输入命令ping -l 1472 -f 192.168.1.1，查看输出结果。如果收到了192.168.1.1的正确回复则加大l之后的数据大小，直到找到需要分包的临界点。然后将此值+28字节的报头填入路由器的MTU中（我家路由器默认为1480，最高只能设置1492，不能设置为1500）。 第七：路由器重启&nbsp; 路由器其实也是一台计算机。在长期不重启的情况下，路由器中的内存占用量越来越大，导致网络变卡。所以及时的重启路由器有助于清除缓存，让路由器轻装上阵，加快速度~ 第八、九：路由器的摆放位置与天线的摆放&nbsp; 可以将路由器想象成一个球体，向着四周发射信号。所以路由器最好的摆放位置应该是房子的中间，且不能放在地上，这样向下扩散的信号将削弱。也最好不要靠近数字设备，避免相互影响。路由器的四个天线的朝向也应该不一样。这样才能够更好的向四面八方传输信号~ 总结：经博主使用Speedtest测验，以上的这些方法确实是有效的 &nbsp; 鸽了好久的如何增强WIFI信号的文章终于写完了，每一次写完博客，我都会希望它能够帮助到一些需要的人，而这也是我写博客的乐趣~ &nbsp; 怎么说呢，在家呆了这么久渐渐也让自己静下来了。开始自己主动去发掘一些生活中好玩的事情，开始去关注一些以前关注不到的东西，也渐渐终于找到了自我。 &nbsp; Bytheway,下一次写博客就得看是否有好玩的东西或者是否有时间了，毕竟也需要学习~ &nbsp; 夜已深，路还长，我依然还是相信着自己… &nbsp; &nbsp; 如果这确实对您有用的话还请多多支持，您的支持与打赏将是我的不竭动力~","tags":[{"name":"随笔","slug":"随笔","permalink":"https://melo-1.github.io/tags/%E9%9A%8F%E7%AC%94/"},{"name":"美好生活","slug":"美好生活","permalink":"https://melo-1.github.io/tags/%E7%BE%8E%E5%A5%BD%E7%94%9F%E6%B4%BB/"}]},{"title":"解决超星网课问题之不能查询后台观看数据和不能观看超时被锁的课程","date":"2020-03-11T15:20:12.000Z","path":"2020/03/11/网课的第三篇/","text":"前言：最近在忙学校算法课的小组课题，有许久没有更新了。这几天也又发现了一些网课的小技巧，课题也差不多进入了中后期了，所以还是能抽出时间写一写。希望能够帮到大家~今天会解决的问题是：1.超星网课中学生端不能查看自己的后台观看数据。 2.超星网课中因为超时被锁的视频无法继续观看。 正文：首先第一个问题，如何解决超星网课中学生端不能查看自己的后台观看数据。先上效果图~ 那么如何实现呢，首先进入我们需要查看的网课课程的章节页面。F12或者查看页面源代码后，在调控页面找到Sources(已用红框框好了)，再在左侧的mycourse文件中找到studentcourse并双击。在代码页面中下滑到图片2所示位置。根据图片中红字提醒。将其填到下面的链接中，其中需要填入的项是下面四个，其余不做变化： 1、mooc1.xxx.edu其中xxx一般填学校简称。这个的位置可以在网课章节页面最上面的链接中看到如下图1中红框中所示的位置得到（此处为了隐私已“打码”博主的学校~）。 2、classId=后面需要填的数字出处也在图2红框中标注。 3、courseId=同上也在图2中有标注。 4、userId=也在图2中标注了。1http:&#x2F;&#x2F;mooc1.xxx.edu.cn&#x2F;moocAnalysis&#x2F;chapterStatisticByUser?classId&#x3D;&amp;courseId&#x3D;&amp;userId&#x3D;&amp;ut&#x3D;s&amp;cpi&#x3D;0&amp;statisticSystem&#x3D;0&amp;openc&#x3D; 图1： 图2： 正确输入后，即能够顺利进入网页查看个人的后台观看数据了~ 第二个问题解决超星网课中因为忘记观看视频而超过开放时限，导致被锁的视频无法继续观看的问题~解决这个问题需要打开课程的章节页面，进入最接近被锁课程的可看课程（即要求这个视频在被锁视频的下面）。然后滑动到网页最下面选择上一页，重复此操作一直跳到你想观看的被锁章节，你会发现顺利观看之前被锁的视频。 而如果担心这样操作不算入观看时长的小伙伴可以试试本文中解决的第一个问题：查看个人的后台观看数据，考察一下是否这样操作算入观看时长。（PS：目前我也不知道能不能够算入观看时长，但是有没有来得及观看视频而被锁的同学不妨试试） 总结如果没有更好玩的技巧的话，网课相关的文章就要结束了。最近有时间的话可能会补上 如何加快家里WIFI速度的文章，鸽了挺久了。嗐，不多说了，课题小组讨论准备要线上讨论了。最后，谢谢大家的观看~","tags":[{"name":"随笔","slug":"随笔","permalink":"https://melo-1.github.io/tags/%E9%9A%8F%E7%AC%94/"},{"name":"网课技巧","slug":"网课技巧","permalink":"https://melo-1.github.io/tags/%E7%BD%91%E8%AF%BE%E6%8A%80%E5%B7%A7/"}]},{"title":"解决腾讯课堂问题之去水印与找出谁演你~","date":"2020-03-07T15:43:12.000Z","path":"2020/03/07/我的第二篇博客/","text":"前言：在上腾讯课堂的时候是不是经常有人披着他人的马甲，在讨论区为所欲为？ 想知道他（她）到底是谁吗？ 还记得腾讯课堂飘过来飘过去的水印（水印：XXXXX正在观看直播）吗？ 那就往下看吧！ BGM依旧来自彩虹岛，愉快的旋律还是很有小时候的感觉 第一个问题：究竟是谁在腾讯课堂讨论区演你？答案当然不是李现，更不是PDD，其实用调试网页+审计元素就能解决这个问题~依然是打开腾讯课堂网页，F12（或者查看网页源代码）后进入调试网页。找到左上角像鼠标一样的图案，点击，并移到发言区，点击匿名者名称，就能定位到有用户QQ号的代码处，即uid为用户QQ号码。具体图片如下所示（有关身份信息都已“打码”）： 会这招以后再也不怕别人演我了~ 第二个问题：如何去除腾讯课堂飘来飘去的水印这个因为时间原因没有准备好图片素材，只能在这里用文字表达。其实也是很简单的审计元素。依然一样的步骤进入网页调试页面，点击左上角鼠标图案，再点击视频中的水印，定位到水印的代码。直接双击span标签中的文字，可编辑此文字后，直接删除原有水印文字。你会看到视频中的水印消失了~ 总结：其实大家也能明白这些操作都是很简单的，所以也希望大家能够使用调试网页进行更有趣的操作从搭博客到今天也差不多4天时间了，感受还是有不少的。首先最多的体会就是终于能有自己的一个小空间了。我可以在里面说一些好玩的或者仅仅只是吐槽搭博客的过程也不是一帆风顺的，遇到不少坑，也填了不少坑。这大概就是计算机学生的写照吧。但是最后回想，这个过程中所接触的新的东西，以及爬出坑后的愉悦感才是最大的收获 大家也可以看出来，我写的东西都是在平时上网课过程中发生的事情。把一些限制打破，其实也是一件好玩的事情hhh。 今天也把最后的问题——github pages加载太慢的问题解决了。解决办法：把博客代码传到了国内的码云pages上。所以明天可能不会花太多时间放博客上，要看书了。但有时间的话，会写关于 如何加快家里WIFI速度的方法，这件事的起因也是因为有家人说家里的网速太慢了，让我试试能不能搞快一点~","tags":[{"name":"随笔","slug":"随笔","permalink":"https://melo-1.github.io/tags/%E9%9A%8F%E7%AC%94/"},{"name":"网课技巧","slug":"网课技巧","permalink":"https://melo-1.github.io/tags/%E7%BD%91%E8%AF%BE%E6%8A%80%E5%B7%A7/"}]},{"title":"解决网课问题之不能快放、移开鼠标就自动暂停问题~","date":"2020-03-06T12:11:12.000Z","path":"2020/03/06/网课的一些小技巧/","text":"前言： 从2.24开始在家上网课，老师用的平台五花八门。其中不乏有课程中心录播的毛概、腾讯 课堂的软件工程、腾讯会议的计算机图形学等等。。。而最让人受不了的是录播的毛概，恶心在不能快放、不能移开鼠标、还有特别难搜的课后习题~ 由此开始了我的学习（偷懒）之路~ *BGM来自小时候最喜欢的彩虹岛,一听就像回到了无忧无虑的小时候~* 正文： 首先第一个问题，解决鼠标不能移离网页界面问题，这里依旧是利用毛概课作为对象~ （~~可以看见视频底栏没有快进键~~）进入到毛概课程网页中。按下键盘上的F12。就能够进入网页的调试界面（新世界~）。将鼠标移入调试界面，此时你也发现由于鼠标的移出导致视频暂停了，没关系我们继续往下走。 接下来找到调试界面的左上角在Elements左边第二个鼠标箭头的图案（**其实就是审计元素**），并点击；再点击整个视频页面定位代码。 之后在调试页面找到EventListeners按钮（**已在下方图片中红框圈住**),并点击。 点击后会发现出现了mouseout项，点击展开后，将鼠标监听事件remove后即可解决该问题~ 第二个问题： 如何解决网课不能加速的问题。这里依然接上面的步骤，已经默认打开了f12(网页调试界面)，接下来还是利用左上角鼠标箭头图案的定位功能，在网页的视频框中点击（这里要注意不能在超出视频框点击，不然无法定位到准确的代码位置。）之后再点击调试页面中的Console栏（在左上角鼠标图案的右边），在最下方输入如下所示触发事件代码： 123document.querySelector(&#39;video&#39;).play();&#x2F;&#x2F;播放视频document.querySelector(&#39;video&#39;).playbackRate &#x3D; 3.0; &#x2F;&#x2F;修改此值设置当前的播放倍数,此处设为3倍 亲测以上问题皆已解决~ 如若在过程中还有问题请在下留言，我将第一时间回复！ 第一次完整写博客的总结 这次的基本上没有排版，因为对于mark的语法还是没熟悉。希望之后能够写得越来越好。 另一方面，很感谢您今天愿意花一些时间看我写得这些文字，希望它能对您有用~ 明天会继续解决的网课问题是： 1、解决腾讯课堂的水印问题——即显示“XXXXXXXXX正在观看”的弹幕。 2、解决腾讯课堂匿名讨论的问题——即能够知道究竟是谁在评论区演你了~ 最后，谢谢大家！","tags":[{"name":"随笔","slug":"随笔","permalink":"https://melo-1.github.io/tags/%E9%9A%8F%E7%AC%94/"},{"name":"网课技巧","slug":"网课技巧","permalink":"https://melo-1.github.io/tags/%E7%BD%91%E8%AF%BE%E6%8A%80%E5%B7%A7/"}]},{"title":"我的第一篇博客","date":"2020-03-04T05:36:12.000Z","path":"2020/03/04/我的第一篇博客/","text":"接下来会在博客上记录自己考研学习的旅程，也会更新一些学到的tips，希望一起共勉！","tags":[{"name":"随笔","slug":"随笔","permalink":"https://melo-1.github.io/tags/%E9%9A%8F%E7%AC%94/"},{"name":"菜鸟上路，注意安全！","slug":"菜鸟上路，注意安全！","permalink":"https://melo-1.github.io/tags/%E8%8F%9C%E9%B8%9F%E4%B8%8A%E8%B7%AF%EF%BC%8C%E6%B3%A8%E6%84%8F%E5%AE%89%E5%85%A8%EF%BC%81/"}]}]